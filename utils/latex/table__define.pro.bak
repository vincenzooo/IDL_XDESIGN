pro table::getproperty,data=data,caption=caption,$
        nrows=nrows,ncols=ncols,colheader=colheader,$
        rowheader=rowheader 
        
        if arg_present(data) then data=*self.data
        if arg_present(caption) then caption=self.caption
        if arg_present(nrows) then nrows=self.nrows
        if arg_present(ncols) then ncols=self.ncols
        if arg_present(colheader) then colheader=*self.colheader
        if arg_present(rowheader) then rowheader=*self.rowheader
end

function table::getproperty,data=data,caption=caption,$
        nrows=nrows,ncols=ncols,colheader=colheader,$
        rowheader=rowheader 
        
        if n_elements(data) ne 0 then return,*self.data
        if n_elements(caption) ne 0 then return,self.caption
        if n_elements(nrows) ne 0 then return,self.nrows
        if n_elements(ncols) ne 0 then return,self.ncols
        if n_elements(colheader) ne 0 then return,*self.colheader
        if n_elements(rowheader) ne 0 then return,*self.rowheader
end

pro table::setproperty,data=data,caption=caption,$
        nrows=nrows,ncols=ncols,colheader=colheader,$
        rowheader=rowheader 
        
        if n_elements(data) ne 0 then begin
          *self.data=data
          rank=size(data,/n_dimensions)
          if rank eq 1 then begin
            self.ncols=1+1
            self.nrows=n_elements(data)+1
          endif else if rank eq 2 then begin
            s=size(data,/dim)
            self.ncols=s[0]+1
            self.nrows=s[1]+1
          endif else begin
            message,'not recognized rank for matrix'
          endelse
        endif  
        if n_elements(caption) ne 0 then self.caption=caption
        if n_elements(colheader) ne 0 then *self.colheader=colheader
        if n_elements(rowheader) ne 0 then *self.rowheader=rowheader
end

pro table::write,format=format,document=document,colwidth=colwidth
  ;colwidth is a string defining the widths in latex format
    ch=*self.colheader
    if n_elements(ch) eq self.ncols-1 then ch=['',ch] 
    string=makelatextable(*self.data,format=format,rowheader=*self.rowheader,colheader=strjoin(ch,'&')+'\\')
    if obj_class(document) eq 'LR' then begin 
    ;TODO: replace default colwidth with the autoformatting commmands in lR, replicate if a single number is provided
    ;allow to pass width in cm (or other units) 
        if n_elements(colwidth) eq 0 then cw='p{3cm}'+(self.ncols eq 1?'':strjoin(replicate('p{2cm}',self.ncols-1))) else cw=colwidth
        DOCUMENT->table,string,cw,caption=self.caption
    endif else begin
        ;TODO:extend to other documents, e.g. text
        message, 'Not recognized type of document for table writing.'
    endelse
end

function table::transpose
  transposed=obj_new('table',data=transpose(self.data),$
      caption=self.caption,colheader=*self.colheader,$
        rowheader=*self.rowheader) 
  return,transposed
end

function table::join,table2,horizontal=horizontal,colheader=colheader,rowheader=rowheader
  if keyword_set(horizontal) then begin
       data=[[*self.data],[*table2.data]]
      if not (array_equal(*self.rowheader,*table2.rowheader)) then begin
        message,'different row headers in attempt of joining tables '+$
                newline()+'table1:'+*self.rowheader+newline()+$
                newline()+'table2:'+*table2.rowheader,/informational
      endif
  endif else begin
      data=[[*self.data],[*table2.data]]
      if not (array_equal(*self.colheader,*table2.colheader)) then begin
        message,'different columns headers in attempt of joining tables '+$
                newline()+'table1:'+*self.colheader+newline()+$
                newline()+'table2:'+*table2.colheader,/informational
      endif
  endelse
  if n_elements(colheader) ne 0 then colheader =colheader else colheader=*self.colheader
  if n_elements(rowheader) ne 0 then rowheader =rowheader else rowheader=*self.rowheader
  transposed=obj_new('table',data=data,$
      caption=self.caption,colheader=colheader,$
        rowheader=rowheader) 
  obj_destroy,table2
  return,joined
end


function table::Init,caption=caption,data=data,nrows=nrows,$
        ncols=ncols,colheader=colheader,rowheader=rowheader
        
    ;self.idstring=idstring
    self.data=ptr_new(/allocate_heap)  ;processed data (e.g. leveled) (2d matrix)
    self.colheader=ptr_new(/allocate_heap)
    self.rowheader=ptr_new(/allocate_heap)
    self->setproperty,caption=caption,data=data,nrows=nrows,$
        ncols=ncols,colheader=colheader,rowheader=rowheader
    return,1
end

pro table::Cleanup
  ptr_free,self.data
  ptr_free,self.colheader
  ptr_free,self.rowheader
end

pro table__define
struct={table,$
        caption:"",$
        data:ptr_new(),$
        nrows:0l,$
        ncols:0l,$
        colheader:ptr_new(),$
        rowheader:ptr_new() $
        }
end